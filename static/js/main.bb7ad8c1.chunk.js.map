{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","TROY_OZT_USD_GOLD","TROY_OZT_USD_SILVER","TROY_OZT_USD_PLATINUM","BITCOIN_USD","ETHEREUM_USD","DOGECOIN_USD","KGC_USD","NEM_USD","GRAMS_IN_OZT","GRAMS_OF_GOLD","GRAMS_OF_SILVER","GRAMS_OF_PLATINUM","BITCOIN","ETHEREUM","DOGECOIN","KGC_SHARES","NEM_SHARES","calcCryptoValueUSD","amount","cryptoType","pricePerAsset","calcMetalValueUSD","numberOfGrams","metalType","pricePerOzt","calcStockValueUSD","share","calcMetalTotal","parseFloat","toFixed","calcCryptoTotal","calcStockTotal","className","round","zeros","prefix","data","colors","style","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAgJeA,MA1If,WAEI,IAFW,EAMuBC,mBAAS,IANhC,mBASLC,GATK,UASe,SACpBC,EAAsB,MACtBC,EAAwB,OACxBC,EAAc,QACdC,EAAe,OACfC,EAAe,UACfC,EAAU,KACVC,EAAU,MAGVC,EAAe,WAGfC,EAAgB,MAChBC,EAAkB,YAClBC,EAAoB,KACpBC,EAAU,GACVC,EAAW,IACXC,EAAW,IACXC,EAAa,EACbC,EAAa,EAEnB,SAASC,EAAmBC,EAAQC,GAChC,IAAIC,EAAgB,EAWpB,MAVmB,YAAfD,IACAC,EAAgBjB,GAED,aAAfgB,IACAC,EAAgBhB,GAED,aAAfe,IACAC,EAAgBf,GAGZe,EAAgBF,EAG5B,SAASG,EAAkBC,EAAeC,GACtC,IAAIC,EAAc,EAWlB,MAVkB,SAAdD,IACAC,EAAcxB,GAEA,WAAduB,IACAC,EAAcvB,GAEA,aAAdsB,IACAC,EAActB,GAGToB,EAAgBd,EAAgBgB,EAG7C,SAASC,EAAkBC,GACvB,MAAc,YAAVA,EAA4BV,EAAaT,EAC/B,YAAVmB,EAA4BX,EAAaT,EACtC,EASX,SAASqB,IACL,OAAOC,WACHP,EAAkBZ,EAAe,QAAUY,EAAkBX,EAAiB,UAAYW,EAAkBV,EAAmB,aACjIkB,QAAQ,GAGd,SAASC,IACL,OAAOF,WACHX,EAAmBL,EAAS,WAAaK,EAAmBH,EAAU,YAAcG,EAAmBJ,EAAU,aACnHgB,QAAQ,GAGd,SAASE,IACL,OAAOH,WACHH,EAAkB,WAAaA,EAAkB,YACnDI,QAAQ,GAed,OACI,yBAAKG,UAAU,OACX,4BAAQA,UAAU,cAQd,6BACI,yCACA,kBAAC,IAAD,CAAUC,MAAO,EAAGC,OAAO,EAAMC,OAAO,IAAIC,KAAM,CAC9C,CAAC,OAAQf,EAAkBZ,EAAe,SAC1C,CAAC,SAAUY,EAAkBX,EAAiB,WAC9C,CAAC,WAAYW,EAAkBV,EAAmB,aAClD,CAAC,UAAWM,EAAmBL,EAAS,YACxC,CAAC,WAAYK,EAAmBH,EAAU,aAC1C,CAAC,WAAYG,EAAmBJ,EAAU,aAC1C,CAAC,eAAgBY,EAAkB,YACnC,CAAC,oBAAqBA,EAAkB,aAC1CY,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,cAE5F,yBAAKC,MA5HA,CACbC,SAAU,SA4HE,sCA3DLX,YACFD,MAAoBI,MAAoBD,KAC3CD,QAAQ,IA0DE,uCAAaE,KACb,uCAAaD,KACb,sCAAYH,KACZ,uCAhCRI,IAAmBJ,KACrBE,QAAQ,GA+BE,OAtCRC,IAAoBH,KACtBE,QAAQ,GAqCE,aC7HAW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bb7ad8c1.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {PieChart} from 'react-chartkick';\r\nimport 'chart.js';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n    const divStyle = {\r\n        fontSize: '10px',\r\n    };\r\n\r\n    const [priceData, setPriceData] = useState({});\r\n\r\n    // Prices\r\n    const TROY_OZT_USD_GOLD = 1626.15;\r\n    const TROY_OZT_USD_SILVER = 14.430;\r\n    const TROY_OZT_USD_PLATINUM = 741.25;\r\n    const BITCOIN_USD = 6206.11;\r\n    const ETHEREUM_USD = 129.68;\r\n    const DOGECOIN_USD = 0.00179909;\r\n    const KGC_USD = 4.22;\r\n    const NEM_USD = 46.35;\r\n\r\n    // Conversion factors\r\n    const GRAMS_IN_OZT = 31.1034768;\r\n\r\n    // Assets\r\n    const GRAMS_OF_GOLD = 16.38;\r\n    const GRAMS_OF_SILVER = 1088.621688; // 35 ozt\r\n    const GRAMS_OF_PLATINUM = 4.35;\r\n    const BITCOIN = 0.1;\r\n    const ETHEREUM = 1.5;\r\n    const DOGECOIN = 20000;\r\n    const KGC_SHARES = 9;\r\n    const NEM_SHARES = 1;\r\n\r\n    function calcCryptoValueUSD(amount, cryptoType) {\r\n        let pricePerAsset = 0;\r\n        if (cryptoType === 'Bitcoin') {\r\n            pricePerAsset = BITCOIN_USD;\r\n        }\r\n        if (cryptoType === 'Ethereum') {\r\n            pricePerAsset = ETHEREUM_USD;\r\n        }\r\n        if (cryptoType === 'Dogecoin') {\r\n            pricePerAsset = DOGECOIN_USD;\r\n        }\r\n\r\n        return (pricePerAsset * amount);\r\n    }\r\n\r\n    function calcMetalValueUSD(numberOfGrams, metalType) {\r\n        let pricePerOzt = 0;\r\n        if (metalType === 'Gold') {\r\n            pricePerOzt = TROY_OZT_USD_GOLD;\r\n        }\r\n        if (metalType === 'Silver') {\r\n            pricePerOzt = TROY_OZT_USD_SILVER;\r\n        }\r\n        if (metalType === 'Platinum') {\r\n            pricePerOzt = TROY_OZT_USD_PLATINUM;\r\n        }\r\n\r\n        return ((numberOfGrams / GRAMS_IN_OZT) * pricePerOzt);\r\n    }\r\n\r\n    function calcStockValueUSD(share) {\r\n        if (share === \"Newmont\") return NEM_SHARES * NEM_USD;\r\n        if (share === \"Kinross\") return KGC_SHARES * KGC_USD;\r\n        return 0;\r\n    }\r\n\r\n    function calcTotal() {\r\n        return parseFloat(\r\n            +calcMetalTotal() + +calcStockTotal() + +calcCryptoTotal()\r\n        ).toFixed(2);\r\n    }\r\n\r\n    function calcMetalTotal() {\r\n        return parseFloat(\r\n            calcMetalValueUSD(GRAMS_OF_GOLD, 'Gold') + calcMetalValueUSD(GRAMS_OF_SILVER, 'Silver') + calcMetalValueUSD(GRAMS_OF_PLATINUM, 'Platinum')\r\n        ).toFixed(2);\r\n    }\r\n\r\n    function calcCryptoTotal() {\r\n        return parseFloat(\r\n            calcCryptoValueUSD(BITCOIN, 'Bitcoin') + calcCryptoValueUSD(DOGECOIN, 'Dogecoin') + calcCryptoValueUSD(ETHEREUM, 'Ethereum')\r\n        ).toFixed(2);\r\n    }\r\n\r\n    function calcStockTotal() {\r\n        return parseFloat(\r\n            calcStockValueUSD(\"Newmont\") + calcStockValueUSD(\"Kinross\")\r\n        ).toFixed(2);\r\n    }\r\n\r\n    function calcCryptoRatio() {\r\n        return (\r\n            calcCryptoTotal() / calcMetalTotal()\r\n        ).toFixed(3);\r\n    }\r\n\r\n    function calcStockRatio() {\r\n        return (\r\n            calcStockTotal() / calcMetalTotal()\r\n        ).toFixed(3);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n{/*                <div>\r\n                    <h3>Mass (grams)</h3>\r\n                    <PieChart\r\n                        data={[[\"Gold\", GRAMS_OF_GOLD], [\"Silver\", GRAMS_OF_SILVER],\r\n                            [\"Platinum\", GRAMS_OF_PLATINUM]]}\r\n                        colors={['#d4af37', '#e5e4e2', '#c0c0c0']}/>\r\n                </div>*/}\r\n                <div>\r\n                    <h3>Portfolio</h3>\r\n                    <PieChart round={2} zeros={true} prefix=\"$\" data={[\r\n                        [\"Gold\", calcMetalValueUSD(GRAMS_OF_GOLD, 'Gold')],\r\n                        [\"Silver\", calcMetalValueUSD(GRAMS_OF_SILVER, 'Silver')],\r\n                        [\"Platinum\", calcMetalValueUSD(GRAMS_OF_PLATINUM, 'Platinum')],\r\n                        [\"Bitcoin\", calcCryptoValueUSD(BITCOIN, 'Bitcoin')],\r\n                        [\"Dogecoin\", calcCryptoValueUSD(DOGECOIN, 'Dogecoin')],\r\n                        [\"Ethereum\", calcCryptoValueUSD(ETHEREUM, 'Ethereum')],\r\n                        [\"Newmont Corp\", calcStockValueUSD(\"Newmont\")],\r\n                        [\"Kinross Gold Corp\", calcStockValueUSD(\"Kinross\")]]\r\n                    } colors={['#d4af37', '#e5e4e2', '#c0c0c0', '#ff9900', '#e1b303', '#3c3c3d', '#ead695', '#95791d']}/>\r\n                </div>\r\n                <div style={divStyle}>\r\n                    <p>Total: ${calcTotal()}</p>\r\n                    <p>Stocks: ${calcStockTotal()}</p>\r\n                    <p>Crypto: ${calcCryptoTotal()}</p>\r\n                    <p>Metal: ${calcMetalTotal()}</p>\r\n                    <p>Ratio: ({calcStockRatio()} : {calcCryptoRatio()} : 1)</p>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
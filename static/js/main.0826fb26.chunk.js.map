{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","TROY_OZT_USD_GOLD","TROY_OZT_USD_SILVER","TROY_OZT_USD_PLATINUM","BITCOIN_USD","ETHEREUM_USD","DOGECOIN_USD","GRAMS_IN_OZT","money_round","num","Math","ceil","calcCryptoValueUSD","amount","cryptoType","pricePerAsset","calcMetalValueUSD","numberOfGrams","metalType","pricePerOzt","className","data","colors","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAoGeA,MA/Ff,WAOE,IAAMC,EAAoB,QACpBC,EAAsB,OACtBC,EAAwB,QACxBC,EAAc,OACdC,EAAe,OACfC,EAAe,SAGfC,EAAe,WAWrB,SAASC,EAAYC,GACnB,OAAOC,KAAKC,KAAW,IAANF,GAAa,IAYhC,SAASG,EAAmBC,EAAQC,GAClC,IAAIC,EAAgB,EAWpB,MAVmB,YAAfD,IACFC,EAAgBX,GAEC,aAAfU,IACFC,EAAgBV,GAEC,aAAfS,IACFC,EAAgBT,GAGXE,EAAYO,EAAgBF,GAGrC,SAASG,EAAkBC,EAAeC,GACxC,IAAIC,EAAc,EAWlB,MAVkB,SAAdD,IACFC,EAAclB,GAEE,WAAdiB,IACFC,EAAcjB,GAEE,aAAdgB,IACFC,EAAchB,GAGRK,EAAaS,EAAgBV,EAAgBY,GAGvD,OACI,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,4CACA,kBAAC,IAAD,CACIC,KAAM,CAAC,CAAC,OAzDA,OAyDwB,CAAC,SAxDvB,QAyDR,CAAC,WAxDS,OAyDZC,OAAQ,CAAC,UAAW,UAAW,cAErC,6BACE,yCACA,kBAAC,IAAD,CAAUD,KAAM,CACd,CAAC,OAAQL,EAhEC,MAgEgC,SAC1C,CAAC,SAAUA,EAhEC,OAgEkC,WAC9C,CAAC,WAAYA,EAhEC,KAgEoC,aAClD,CAAC,UAAWJ,EAhER,KAgEoC,YACxC,CAAC,WAAYA,EAhER,EAgEqC,aAC1C,CAAC,WAAYA,EAhER,IAgEqC,cAC1CU,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,iBCjF1DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0826fb26.chunk.js","sourcesContent":["import React from 'react';\r\nimport {PieChart} from 'react-chartkick';\r\nimport 'chart.js';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n/*\r\n  const [goldPrice, setGoldPrice] = useState({});\r\n*/\r\n\r\n  // Prices per asset\r\n  const TROY_OZT_USD_GOLD = 1572.36;\r\n  const TROY_OZT_USD_SILVER = 18.053;\r\n  const TROY_OZT_USD_PLATINUM = 1010.56;\r\n  const BITCOIN_USD = 8471.50;\r\n  const ETHEREUM_USD = 162.08;\r\n  const DOGECOIN_USD = 0.0022858;\r\n\r\n  // Conversion factors\r\n  const GRAMS_IN_OZT = 31.1034768;\r\n\r\n  // Assets\r\n  const GRAMS_OF_GOLD = 16.38;\r\n  const GRAMS_OF_SILVER = 715.37;\r\n  const GRAMS_OF_PLATINUM = 4.35;\r\n  const BITCOIN = 0.025;\r\n  const ETHEREUM = 1;\r\n  const DOGECOIN = 10000;\r\n\r\n\r\n  function money_round(num) {\r\n    return Math.ceil(num * 100) / 100;\r\n  }\r\n\r\n/*  useEffect(() => {\r\n    axios.get('https://www.kitco.com/gold-price-today-usa/', {\r\n      crossdomain: true\r\n    }).then(({data}) => {\r\n      setGoldPrice(data);\r\n    });\r\n    console.log(goldPrice);\r\n  });*/\r\n\r\n  function calcCryptoValueUSD(amount, cryptoType) {\r\n    let pricePerAsset = 0;\r\n    if (cryptoType === 'Bitcoin') {\r\n      pricePerAsset = BITCOIN_USD;\r\n    }\r\n    if (cryptoType === 'Ethereum') {\r\n      pricePerAsset = ETHEREUM_USD;\r\n    }\r\n    if (cryptoType === 'Dogecoin') {\r\n      pricePerAsset = DOGECOIN_USD;\r\n    }\r\n\r\n    return money_round(pricePerAsset * amount);\r\n  }\r\n\r\n  function calcMetalValueUSD(numberOfGrams, metalType) {\r\n    let pricePerOzt = 0;\r\n    if (metalType === 'Gold') {\r\n      pricePerOzt = TROY_OZT_USD_GOLD;\r\n    }\r\n    if (metalType === 'Silver') {\r\n      pricePerOzt = TROY_OZT_USD_SILVER;\r\n    }\r\n    if (metalType === 'Platinum') {\r\n      pricePerOzt = TROY_OZT_USD_PLATINUM;\r\n    }\r\n\r\n    return (money_round((numberOfGrams / GRAMS_IN_OZT) * pricePerOzt));\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div>\r\n            <h3>Mass (grams)</h3>\r\n            <PieChart\r\n                data={[[\"Gold\", GRAMS_OF_GOLD], [\"Silver\", GRAMS_OF_SILVER],\r\n                  [\"Platinum\", GRAMS_OF_PLATINUM]]}\r\n                colors={['#d4af37', '#e5e4e2', '#c0c0c0']}/>\r\n          </div>\r\n          <div>\r\n            <h3>USD Value</h3>\r\n            <PieChart data={[\r\n              [\"Gold\", calcMetalValueUSD(GRAMS_OF_GOLD, 'Gold')],\r\n              [\"Silver\", calcMetalValueUSD(GRAMS_OF_SILVER, 'Silver')],\r\n              [\"Platinum\", calcMetalValueUSD(GRAMS_OF_PLATINUM, 'Platinum')],\r\n              [\"Bitcoin\", calcCryptoValueUSD(BITCOIN, 'Bitcoin')],\r\n              [\"Ethereum\", calcCryptoValueUSD(ETHEREUM, 'Ethereum')],\r\n              [\"Dogecoin\", calcCryptoValueUSD(DOGECOIN, 'Dogecoin')]]\r\n            } colors={['#d4af37', '#e5e4e2', '#c0c0c0', '#ff9900', '#3c3c3d', '#e1b303']}/>\r\n          </div>\r\n        </header>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
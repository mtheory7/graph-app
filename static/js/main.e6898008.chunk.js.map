{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","TROY_OZT_USD_GOLD","TROY_OZT_USD_SILVER","TROY_OZT_USD_PLATINUM","BITCOIN_USD","ETHEREUM_USD","DOGECOIN_USD","GRAMS_IN_OZT","calcCryptoValueUSD","amount","cryptoType","pricePerAsset","calcMetalValueUSD","numberOfGrams","metalType","pricePerOzt","className","data","colors","round","zeros","prefix","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NA+FeA,MA1Ff,WAOE,IAAMC,EAAoB,QACpBC,EAAsB,OACtBC,EAAwB,QACxBC,EAAc,OACdC,EAAe,OACfC,EAAe,SAGfC,EAAe,WAmBrB,SAASC,EAAmBC,EAAQC,GAClC,IAAIC,EAAgB,EAWpB,MAVmB,YAAfD,IACFC,EAAgBP,GAEC,aAAfM,IACFC,EAAgBN,GAEC,aAAfK,IACFC,EAAgBL,GAGVK,EAAgBF,EAG1B,SAASG,EAAkBC,EAAeC,GACxC,IAAIC,EAAc,EAWlB,MAVkB,SAAdD,IACFC,EAAcd,GAEE,WAAda,IACFC,EAAcb,GAEE,aAAdY,IACFC,EAAcZ,GAGPU,EAAgBN,EAAgBQ,EAG3C,OACI,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,4CACA,kBAAC,IAAD,CACIC,KAAM,CAAC,CAAC,OApDA,OAoDwB,CAAC,SAnDvB,QAoDR,CAAC,WAnDS,OAoDZC,OAAQ,CAAC,UAAW,UAAW,cAErC,6BACE,yCACA,kBAAC,IAAD,CAAUC,MAAO,EAAGC,OAAO,EAAMC,OAAO,IAAIJ,KAAM,CAChD,CAAC,OAAQL,EA3DC,MA2DgC,SAC1C,CAAC,SAAUA,EA3DC,OA2DkC,WAC9C,CAAC,WAAYA,EA3DC,KA2DoC,aAClD,CAAC,UAAWJ,EA3DR,KA2DoC,YACxC,CAAC,WAAYA,EA1DR,IA0DqC,aAC1C,CAAC,WAAYA,EA5DR,EA4DqC,cAC1CU,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,iBC5E1DI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e6898008.chunk.js","sourcesContent":["import React from 'react';\nimport {PieChart} from 'react-chartkick';\nimport 'chart.js';\nimport './App.css';\n\nfunction App() {\n\n/*\n  const [goldPrice, setGoldPrice] = useState({});\n*/\n\n  // Prices per asset\n  const TROY_OZT_USD_GOLD = 1572.36;\n  const TROY_OZT_USD_SILVER = 18.053;\n  const TROY_OZT_USD_PLATINUM = 1010.56;\n  const BITCOIN_USD = 8471.50;\n  const ETHEREUM_USD = 162.08;\n  const DOGECOIN_USD = 0.0022858;\n\n  // Conversion factors\n  const GRAMS_IN_OZT = 31.1034768;\n\n  // Assets\n  const GRAMS_OF_GOLD = 16.38;\n  const GRAMS_OF_SILVER = 715.37;\n  const GRAMS_OF_PLATINUM = 4.35;\n  const BITCOIN = 0.025;\n  const ETHEREUM = 1;\n  const DOGECOIN = 10000;\n\n/*  useEffect(() => {\n    axios.get('https://www.kitco.com/gold-price-today-usa/', {\n      crossdomain: true\n    }).then(({data}) => {\n      setGoldPrice(data);\n    });\n    console.log(goldPrice);\n  });*/\n\n  function calcCryptoValueUSD(amount, cryptoType) {\n    let pricePerAsset = 0;\n    if (cryptoType === 'Bitcoin') {\n      pricePerAsset = BITCOIN_USD;\n    }\n    if (cryptoType === 'Ethereum') {\n      pricePerAsset = ETHEREUM_USD;\n    }\n    if (cryptoType === 'Dogecoin') {\n      pricePerAsset = DOGECOIN_USD;\n    }\n\n    return (pricePerAsset * amount);\n  }\n\n  function calcMetalValueUSD(numberOfGrams, metalType) {\n    let pricePerOzt = 0;\n    if (metalType === 'Gold') {\n      pricePerOzt = TROY_OZT_USD_GOLD;\n    }\n    if (metalType === 'Silver') {\n      pricePerOzt = TROY_OZT_USD_SILVER;\n    }\n    if (metalType === 'Platinum') {\n      pricePerOzt = TROY_OZT_USD_PLATINUM;\n    }\n\n    return ((numberOfGrams / GRAMS_IN_OZT) * pricePerOzt);\n  }\n\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>\n            <h3>Mass (grams)</h3>\n            <PieChart\n                data={[[\"Gold\", GRAMS_OF_GOLD], [\"Silver\", GRAMS_OF_SILVER],\n                  [\"Platinum\", GRAMS_OF_PLATINUM]]}\n                colors={['#d4af37', '#e5e4e2', '#c0c0c0']}/>\n          </div>\n          <div>\n            <h3>USD Value</h3>\n            <PieChart round={2} zeros={true} prefix=\"$\" data={[\n              [\"Gold\", calcMetalValueUSD(GRAMS_OF_GOLD, 'Gold')],\n              [\"Silver\", calcMetalValueUSD(GRAMS_OF_SILVER, 'Silver')],\n              [\"Platinum\", calcMetalValueUSD(GRAMS_OF_PLATINUM, 'Platinum')],\n              [\"Bitcoin\", calcCryptoValueUSD(BITCOIN, 'Bitcoin')],\n              [\"Dogecoin\", calcCryptoValueUSD(DOGECOIN, 'Dogecoin')],\n              [\"Ethereum\", calcCryptoValueUSD(ETHEREUM, 'Ethereum')]]\n            } colors={['#d4af37', '#e5e4e2', '#c0c0c0', '#ff9900', '#3c3c3d', '#e1b303']}/>\n          </div>\n        </header>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
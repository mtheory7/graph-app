{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","TROY_OZT_USD_GOLD","TROY_OZT_USD_SILVER","TROY_OZT_USD_PLATINUM","BITCOIN_USD","ETHEREUM_USD","DOGECOIN_USD","KGC_USD","NEM_USD","GRAMS_IN_OZT","GRAMS_OF_GOLD","GRAMS_OF_SILVER","GRAMS_OF_PLATINUM","BITCOIN","ETHEREUM","DOGECOIN","KGC_SHARES","NEM_SHARES","calcCryptoValueUSD","amount","cryptoType","pricePerAsset","calcMetalValueUSD","numberOfGrams","metalType","pricePerOzt","calcStockValueUSD","share","calcMetalTotal","parseFloat","toFixed","calcCryptoTotal","calcStockTotal","className","round","zeros","prefix","data","colors","style","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAgJeA,MA1If,WAEI,IAFW,EAMuBC,mBAAS,IANhC,mBASLC,GATK,UASe,QACpBC,EAAsB,OACtBC,EAAwB,OACxBC,EAAc,QACdC,EAAe,OACfC,EAAe,QACfC,EAAU,KACVC,EAAU,MAGVC,EAAe,WAGfC,EAAmBD,EAAe,EAAMA,EAAe,EAAM,IAAQ,MACrEE,EAAmB,GAAKF,EACxBG,EAAoB,KACpBC,EAAU,IACVC,EAAW,IACXC,EAAW,IACXC,EAAa,EACbC,EAAa,EAEnB,SAASC,EAAmBC,EAAQC,GAChC,IAAIC,EAAgB,EAWpB,MAVmB,YAAfD,IACAC,EAAgBjB,GAED,aAAfgB,IACAC,EAAgBhB,GAED,aAAfe,IACAC,EAAgBf,GAGZe,EAAgBF,EAG5B,SAASG,EAAkBC,EAAeC,GACtC,IAAIC,EAAc,EAWlB,MAVkB,SAAdD,IACAC,EAAcxB,GAEA,WAAduB,IACAC,EAAcvB,GAEA,aAAdsB,IACAC,EAActB,GAGToB,EAAgBd,EAAgBgB,EAG7C,SAASC,EAAkBC,GACvB,MAAc,YAAVA,EAA4BV,EAAaT,EAC/B,YAAVmB,EAA4BX,EAAaT,EACtC,EASX,SAASqB,IACL,OAAOC,WACHP,EAAkBZ,EAAe,QAAUY,EAAkBX,EAAiB,UAAYW,EAAkBV,EAAmB,aACjIkB,QAAQ,GAGd,SAASC,IACL,OAAOF,WACHX,EAAmBL,EAAS,WAAaK,EAAmBH,EAAU,YAAcG,EAAmBJ,EAAU,aACnHgB,QAAQ,GAGd,SAASE,IACL,OAAOH,WACHH,EAAkB,WAAaA,EAAkB,YACnDI,QAAQ,GAed,OACI,yBAAKG,UAAU,OACX,4BAAQA,UAAU,cAQd,6BACI,yCACA,kBAAC,IAAD,CAAUC,MAAO,EAAGC,OAAO,EAAMC,OAAO,IAAIC,KAAM,CAC9C,CAAC,QAAQ3B,EAAc,IAAKY,EAAkBZ,EAAe,SAC7D,CAAC,UAAUC,EAAgB,IAAKW,EAAkBX,EAAiB,WACnE,CAAC,YAAYC,EAAkB,IAAKU,EAAkBV,EAAmB,aACzE,CAAC,UAAWM,EAAmBL,EAAS,YACxC,CAAC,WAAYK,EAAmBH,EAAU,aAC1C,CAAC,WAAYG,EAAmBJ,EAAU,aAC1C,CAAC,eAAgBY,EAAkB,YACnC,CAAC,oBAAqBA,EAAkB,aAC1CY,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,cAE5F,yBAAKC,MA5HA,CACbC,SAAU,SA4HE,sCA3DLX,YACFD,MAAoBI,MAAoBD,KAC3CD,QAAQ,IA0DE,uCAAaE,KACb,uCAAaD,KACb,sCAAYH,KACZ,uCAhCRI,IAAmBJ,KACrBE,QAAQ,GA+BE,OAtCRC,IAAoBH,KACtBE,QAAQ,GAqCE,aC7HAW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a48d241b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport {PieChart} from 'react-chartkick';\nimport 'chart.js';\nimport './App.css';\n\nfunction App() {\n\n    const divStyle = {\n        fontSize: '10px',\n    };\n\n    const [priceData, setPriceData] = useState({});\n\n    // Prices\n    const TROY_OZT_USD_GOLD = 1734.60;\n    const TROY_OZT_USD_SILVER = 17.182;\n    const TROY_OZT_USD_PLATINUM = 839.75;\n    const BITCOIN_USD = 9153.19;\n    const ETHEREUM_USD = 205.52;\n    const DOGECOIN_USD = 0.0025410;\n    const KGC_USD = 7.05;\n    const NEM_USD = 63.05;\n\n    // Conversion factors\n    const GRAMS_IN_OZT = 31.1034768;\n\n    // Assets               // 2 x 1/10ozt       // 1 x 1/4ozt        // 1 x 5g && 1 x 0.5g && 12.39g\n    const GRAMS_OF_GOLD = ( (GRAMS_IN_OZT / 5) + (GRAMS_IN_OZT / 4) + (5.5) + (12.38) );\n    const GRAMS_OF_SILVER = (36 * GRAMS_IN_OZT);\n    const GRAMS_OF_PLATINUM = 4.35;\n    const BITCOIN = 0.08;\n    const ETHEREUM = 1.5;\n    const DOGECOIN = 80000;\n    const KGC_SHARES = 1;\n    const NEM_SHARES = 1;\n\n    function calcCryptoValueUSD(amount, cryptoType) {\n        let pricePerAsset = 0;\n        if (cryptoType === 'Bitcoin') {\n            pricePerAsset = BITCOIN_USD;\n        }\n        if (cryptoType === 'Ethereum') {\n            pricePerAsset = ETHEREUM_USD;\n        }\n        if (cryptoType === 'Dogecoin') {\n            pricePerAsset = DOGECOIN_USD;\n        }\n\n        return (pricePerAsset * amount);\n    }\n\n    function calcMetalValueUSD(numberOfGrams, metalType) {\n        let pricePerOzt = 0;\n        if (metalType === 'Gold') {\n            pricePerOzt = TROY_OZT_USD_GOLD;\n        }\n        if (metalType === 'Silver') {\n            pricePerOzt = TROY_OZT_USD_SILVER;\n        }\n        if (metalType === 'Platinum') {\n            pricePerOzt = TROY_OZT_USD_PLATINUM;\n        }\n\n        return ((numberOfGrams / GRAMS_IN_OZT) * pricePerOzt);\n    }\n\n    function calcStockValueUSD(share) {\n        if (share === \"Newmont\") return NEM_SHARES * NEM_USD;\n        if (share === \"Kinross\") return KGC_SHARES * KGC_USD;\n        return 0;\n    }\n\n    function calcTotal() {\n        return parseFloat(\n            +calcMetalTotal() + +calcStockTotal() + +calcCryptoTotal()\n        ).toFixed(2);\n    }\n\n    function calcMetalTotal() {\n        return parseFloat(\n            calcMetalValueUSD(GRAMS_OF_GOLD, 'Gold') + calcMetalValueUSD(GRAMS_OF_SILVER, 'Silver') + calcMetalValueUSD(GRAMS_OF_PLATINUM, 'Platinum')\n        ).toFixed(2);\n    }\n\n    function calcCryptoTotal() {\n        return parseFloat(\n            calcCryptoValueUSD(BITCOIN, 'Bitcoin') + calcCryptoValueUSD(DOGECOIN, 'Dogecoin') + calcCryptoValueUSD(ETHEREUM, 'Ethereum')\n        ).toFixed(2);\n    }\n\n    function calcStockTotal() {\n        return parseFloat(\n            calcStockValueUSD(\"Newmont\") + calcStockValueUSD(\"Kinross\")\n        ).toFixed(2);\n    }\n\n    function calcCryptoRatio() {\n        return (\n            calcCryptoTotal() / calcMetalTotal()\n        ).toFixed(3);\n    }\n\n    function calcStockRatio() {\n        return (\n            calcStockTotal() / calcMetalTotal()\n        ).toFixed(3);\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n{/*                <div>\n                    <h3>Mass (grams)</h3>\n                    <PieChart\n                        data={[[\"Gold\", GRAMS_OF_GOLD], [\"Silver\", GRAMS_OF_SILVER],\n                            [\"Platinum\", GRAMS_OF_PLATINUM]]}\n                        colors={['#d4af37', '#e5e4e2', '#c0c0c0']}/>\n                </div>*/}\n                <div>\n                    <h3>Portfolio</h3>\n                    <PieChart round={2} zeros={true} prefix=\"$\" data={[\n                        [\"Gold-\"+GRAMS_OF_GOLD+\"g\", calcMetalValueUSD(GRAMS_OF_GOLD, 'Gold')],\n                        [\"Silver-\"+GRAMS_OF_SILVER+\"g\", calcMetalValueUSD(GRAMS_OF_SILVER, 'Silver')],\n                        [\"Platinum-\"+GRAMS_OF_PLATINUM+\"g\", calcMetalValueUSD(GRAMS_OF_PLATINUM, 'Platinum')],\n                        [\"Bitcoin\", calcCryptoValueUSD(BITCOIN, 'Bitcoin')],\n                        [\"Dogecoin\", calcCryptoValueUSD(DOGECOIN, 'Dogecoin')],\n                        [\"Ethereum\", calcCryptoValueUSD(ETHEREUM, 'Ethereum')],\n                        [\"Newmont Corp\", calcStockValueUSD(\"Newmont\")],\n                        [\"Kinross Gold Corp\", calcStockValueUSD(\"Kinross\")]]\n                    } colors={['#d4af37', '#e5e4e2', '#c0c0c0', '#ff9900', '#e1b303', '#3c3c3d', '#ead695', '#95791d']}/>\n                </div>\n                <div style={divStyle}>\n                    <p>Total: ${calcTotal()}</p>\n                    <p>Stocks: ${calcStockTotal()}</p>\n                    <p>Crypto: ${calcCryptoTotal()}</p>\n                    <p>Metal: ${calcMetalTotal()}</p>\n                    <p>Ratio: ({calcStockRatio()} : {calcCryptoRatio()} : 1)</p>\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}